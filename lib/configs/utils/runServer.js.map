{"version":3,"sources":["../../../src/configs/utils/runServer.js"],"names":["server","pending","serverPath","join","turnOff","kill","runServer","host","existsSync","message","bold","cyan","console","log","yellow","Promise","resolve","onStdOut","data","time","Date","toTimeString","wasRun","toString","indexOf","process","stdout","write","replace","removeListener","on","x","spawn","env","Object","assign","NODE_ENV","once","code","signal","Error","stderr","red","reject"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AAEA,IAAIA,MAAJ;AACA,IAAIC,UAAU,IAAd;AACA,MAAMC,aAAa,eAAKC,IAAL,mEAAnB;;AAEA,SAASC,OAAT,GAAoB;AAClB,MAAIJ,MAAJ,EAAY;AACVA,WAAOK,IAAP,CAAY,SAAZ;AACD;AACF;;AAED,SAASC,SAAT,CAAoBC,IAApB,EAA0B;AACxB,wCAAkB;AAChB,QAAI,CAAC,aAAGC,UAAH,CAAcN,UAAd,CAAL,EAAgC;AAC9B,YAAMO,UAAW;yCACkB,gBAAMC,IAAN,CAAWC,IAAX,CAAgBT,UAAhB,CAA4B;GAD/D;;AAIAU,cAAQC,GAAR,CAAY,gBAAMH,IAAN,CAAWI,MAAX,CAAkBL,OAAlB,CAAZ;;AAEA,aAAOM,QAAQC,OAAR,CAAgBP,OAAhB,CAAP;AACD;;AAED,WAAO,IAAIM,OAAJ,CAAaC,OAAD,IAAa;AAC9B,eAASC,QAAT,CAAmBC,IAAnB,EAAyB;AACvB,cAAMC,OAAO,IAAIC,IAAJ,GAAWC,YAAX,EAAb;AACA,cAAMC,SAASJ,KAAKK,QAAL,CAAc,MAAd,EAAsBC,OAAtB,kDAA4D,CAAC,CAA5E;;AAEAC,gBAAQC,MAAR,CAAeC,KAAf,CAAqBR,KAAKS,OAAL,CAAa,yBAAb,EAAwC,OAAxC,CAArB;AACAH,gBAAQC,MAAR,CAAeC,KAAf,CAAqBT,IAArB;;AAEA,YAAII,MAAJ,EAAY;AACVtB,iBAAOO,IAAP,GAAcA,IAAd;AACAP,iBAAO0B,MAAP,CAAcG,cAAd,CAA6B,MAA7B,EAAqCZ,QAArC;AACAjB,iBAAO0B,MAAP,CAAcI,EAAd,CAAiB,MAAjB,EAAyBC,KAAKN,QAAQC,MAAR,CAAeC,KAAf,CAAqBI,CAArB,CAA9B;AACA9B,oBAAU,KAAV;AACAe,kBAAQhB,MAAR;AACD;AACF;;AAEDI;;AAEAJ,eAAS,wBAAGgC,KAAH,CAAS,MAAT,EAAiB,CAAC9B,UAAD,CAAjB,EAA+B;AACtC+B,aAAKC,OAAOC,MAAP,CAAc,EAACC,UAAU,aAAX,EAAd,EAAyCX,QAAQQ,GAAjD;AADiC,OAA/B,CAAT;;AAIA,UAAIhC,OAAJ,EAAa;AACXD,eAAOqC,IAAP,CAAY,MAAZ,EAAoB,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACpC,cAAItC,OAAJ,EAAa;AACX,kBAAM,IAAIuC,KAAJ,CAAW,6CAA4CF,IAAK,YAAWC,MAAO,EAA9E,CAAN;AACD;AACF,SAJD;AAKD;;AAEDvC,aAAO0B,MAAP,CAAcI,EAAd,CAAiB,MAAjB,EAAyBb,QAAzB;AACAjB,aAAOyC,MAAP,CAAcX,EAAd,CAAiB,MAAjB,EAAyBC,KAAKN,QAAQgB,MAAR,CAAed,KAAf,CAAqBI,CAArB,CAA9B;;AAEA,aAAO/B,MAAP;AACD,KAnCM,CAAP;AAoCD,GA/CD,MA+CO;AACL,UAAMS,UAAW;8CACyB,gBAAMC,IAAN,CAAWC,IAAX,CAAgBT,UAAhB,CAA4B;GADtE;;AAIAU,YAAQC,GAAR,CAAY,gBAAMH,IAAN,CAAWgC,GAAX,CAAejC,OAAf,CAAZ;;AAEA,WAAOM,QAAQ4B,MAAR,CAAelC,OAAf,CAAP;AACD;AACF;;AAEDgB,QAAQK,EAAR,CAAW,MAAX,EAAmB1B,OAAnB;;kBAEeE,S","file":"runServer.js","sourcesContent":["import chalk from 'chalk';\nimport cp from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\nimport { serverWasRunDetectString } from '../../configs/prepare.build-tools.config';\nimport { entryServer, isIsomorphic, outputServer } from '../prepare.build-tools.config';\n\nlet server;\nlet pending = true;\nconst serverPath = path.join(outputServer, entryServer);\n\nfunction turnOff () {\n  if (server) {\n    server.kill('SIGTERM');\n  }\n}\n\nfunction runServer (host) {\n  if (isIsomorphic) {\n    if (!fs.existsSync(serverPath)) {\n      const message = `\n\t\t!!! [WANTED][SERVER_FILE][NOT_FOUNT][${chalk.bold.cyan(serverPath)}] !!!\n\t\t`;\n\n      console.log(chalk.bold.yellow(message));\n\n      return Promise.resolve(message);\n    }\n\n    return new Promise((resolve) => {\n      function onStdOut (data) {\n        const time = new Date().toTimeString();\n        const wasRun = data.toString('utf8').indexOf(serverWasRunDetectString) !== -1;\n\n        process.stdout.write(time.replace(/.*(\\d{2}:\\d{2}:\\d{2}).*/, '[$1] '));\n        process.stdout.write(data);\n\n        if (wasRun) {\n          server.host = host;\n          server.stdout.removeListener('data', onStdOut);\n          server.stdout.on('data', x => process.stdout.write(x));\n          pending = false;\n          resolve(server);\n        }\n      }\n\n      turnOff();\n\n      server = cp.spawn('node', [serverPath], {\n        env: Object.assign({NODE_ENV: 'development'}, process.env),\n      });\n\n      if (pending) {\n        server.once('exit', (code, signal) => {\n          if (pending) {\n            throw new Error(`Server terminated unexpectedly with code: ${code} signal: ${signal}`);\n          }\n        });\n      }\n\n      server.stdout.on('data', onStdOut);\n      server.stderr.on('data', x => process.stderr.write(x));\n\n      return server;\n    });\n  } else {\n    const message = `\n\t\t!!! [WANTED][TRY][RUN_SERVER_IN_SPA_MODE][${chalk.bold.cyan(serverPath)}] !!!\n\t\t`;\n\n    console.log(chalk.bold.red(message));\n\n    return Promise.reject(message);\n  }\n}\n\nprocess.on('exit', turnOff);\n\nexport default runServer;\n"]}