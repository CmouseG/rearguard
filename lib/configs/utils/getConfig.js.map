{"version":3,"sources":["../../../src/configs/utils/getConfig.js"],"names":["CWD","process","cwd","pkgPath","resolve","buildPropTypes","context","entry","output","modules","browserslist","proxy","isomorphic","css","typescript","socketPropTypes","socket","prepareConfig","fileName","propTypes","configPath","existsSync","config","__config__","require","propName","hasOwnProperty","Object","keys","length","console","log","bold","red","JSON","stringify","writeFileSync","pkg","nodeVersion","parseFloat","engines","node","match","dependencies","buildConfig","socketConfig","Error"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;kBAEe,MAAM;AACnB,QAAMA,MAAMC,QAAQC,GAAR,EAAZ;AACA,QAAMC,UAAU,eAAKC,OAAL,CAAaJ,GAAb,EAAkB,cAAlB,CAAhB;;AAEA,QAAMK,iBAAiB;AACrBC,8BADqB;AAErBC,0BAFqB;AAGrBC,4BAHqB;AAIrBC,8BAJqB;AAKrBC,wCALqB;AAMrBC,0BANqB;AAOrBC,oCAPqB;AAQrBC,sBARqB;AASrBC;AATqB,GAAvB;;AAYA,QAAMC,kBAAkB;AACtBC;AADsB,GAAxB;;AAIA,QAAMC,gBAAgB,CAACC,QAAD,EAAWC,SAAX,KAAyB;AAC7C,UAAMC,aAAa,eAAKhB,OAAL,CAAaJ,GAAb,EAAkBkB,QAAlB,CAAnB;;AAEA,QAAI,aAAGG,UAAH,CAAcD,UAAd,CAAJ,EAA+B;AAC7B,YAAME,SAAS,EAAf;AACA,YAAMC,aAAaC,QAAQJ,UAAR,CAAnB;;AAEA,WAAK,IAAIK,QAAT,IAAqBN,SAArB,EAAgC;AAC9B,YAAIA,UAAUO,cAAV,CAAyBD,QAAzB,CAAJ,EAAwC;AACtCH,iBAAOG,QAAP,IAAmBN,UAAUM,QAAV,EAAoBF,WAAWE,QAAX,CAApB,CAAnB;AACAF,qBAAWE,QAAX,IAAuB,IAAvB;AACA,iBAAOF,WAAWE,QAAX,CAAP;AACD;AACF;;AAED,UAAIE,OAAOC,IAAP,CAAYL,UAAZ,EAAwBM,MAAxB,GAAiC,CAArC,EAAwC;AACtCC,gBAAQC,GAAR,CAAY,gBAAMC,IAAN,CAAWC,GAAX,CAAgB,kCAAiCC,KAAKC,SAAL,CAAeZ,UAAf,EAA2B,IAA3B,EAAiC,CAAjC,CAAoC,GAArF,CAAZ;AACAO,gBAAQC,GAAR,CAAY,gBAAMC,IAAN,CAAWC,GAAX,CAAgB,kDAAhB,CAAZ;AACD;;AAED,aAAOX,MAAP;AACD,KAlBD,MAkBO;AACL,YAAMA,SAAS,EAAf;;AAEA,WAAK,IAAIG,QAAT,IAAqBN,SAArB,EAAgC;AAC9B,YAAIA,UAAUO,cAAV,CAAyBD,QAAzB,CAAJ,EAAwC;AACtCH,iBAAOG,QAAP,IAAmBN,UAAUM,QAAV,EAAoB,IAApB,EAA0B,IAA1B,CAAnB;AACD;AACF;;AAED,mBAAGW,aAAH,CAAiBhB,UAAjB,EAA6Bc,KAAKC,SAAL,CAAeb,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAA7B;;AAEA,aAAOA,MAAP;AACD;AACF,GAlCD;;AAoCA,MAAI,aAAGD,UAAH,CAAclB,OAAd,CAAJ,EAA4B;AAC1B,UAAMkC,MAAMb,QAAQrB,OAAR,CAAZ;AACA,UAAMmC,cAAcC,WAAWF,IAAIG,OAAJ,CAAYC,IAAZ,CAAiBC,KAAjB,CAAuB,WAAvB,EAAoC,CAApC,CAAX,CAApB;AACA,UAAMF,UAAUH,IAAIG,OAApB;AACA,UAAMG,eAAeN,IAAIM,YAAzB;AACA,UAAMC,cAAc3B,cAAc,mBAAd,EAAmCZ,cAAnC,CAApB;AACA,UAAMwC,eAAe5B,cAAc,oBAAd,EAAoCF,eAApC,CAArB;;AAEA,wBACK6B,WADL,EAEKC,YAFL;AAGEP,iBAHF;AAIEE,aAJF;AAKEG;AALF;AAOD,GAfD,MAeO;AACL,UAAM,IAAIG,KAAJ,CAAU,uGAAV,CAAN;AACD;AACF,C","file":"getConfig.js","sourcesContent":["import chalk from 'chalk';\nimport fs from 'fs';\nimport path from 'path';\nimport browserslist from '../validate-config/browserslist';\nimport context from '../validate-config/context';\nimport css from '../validate-config/css';\nimport entry from '../validate-config/entry';\nimport isomorphic from '../validate-config/isomorphic';\nimport modules from '../validate-config/modules';\nimport output from '../validate-config/output';\nimport proxy from '../validate-config/proxy';\nimport typescript from '../validate-config/typescript';\nimport socket from '../validate-config/socket';\n\nexport default () => {\n  const CWD = process.cwd();\n  const pkgPath = path.resolve(CWD, 'package.json');\n\n  const buildPropTypes = {\n    context,\n    entry,\n    output,\n    modules,\n    browserslist,\n    proxy,\n    isomorphic,\n    css,\n    typescript\n  };\n\n  const socketPropTypes = {\n    socket,\n  };\n\n  const prepareConfig = (fileName, propTypes) => {\n    const configPath = path.resolve(CWD, fileName);\n\n    if (fs.existsSync(configPath)) {\n      const config = {};\n      const __config__ = require(configPath);\n\n      for (let propName in propTypes) {\n        if (propTypes.hasOwnProperty(propName)) {\n          config[propName] = propTypes[propName](__config__[propName]);\n          __config__[propName] = null;\n          delete __config__[propName];\n        }\n      }\n\n      if (Object.keys(__config__).length > 0) {\n        console.log(chalk.bold.red(`This is configs not used: \\n\\r\"${JSON.stringify(__config__, null, 2)}\"`));\n        console.log(chalk.bold.red(`Please remove their from build-tools.config.json`));\n      }\n\n      return config;\n    } else {\n      const config = {};\n\n      for (let propName in propTypes) {\n        if (propTypes.hasOwnProperty(propName)) {\n          config[propName] = propTypes[propName](null, true);\n        }\n      }\n\n      fs.writeFileSync(configPath, JSON.stringify(config, null, 2));\n\n      return config;\n    }\n  };\n\n  if (fs.existsSync(pkgPath)) {\n    const pkg = require(pkgPath);\n    const nodeVersion = parseFloat(pkg.engines.node.match(/(\\d+\\.?)+/)[0]);\n    const engines = pkg.engines;\n    const dependencies = pkg.dependencies;\n    const buildConfig = prepareConfig('build.config.json', buildPropTypes);\n    const socketConfig = prepareConfig('socket.config.json', socketPropTypes);\n\n    return {\n      ...buildConfig,\n      ...socketConfig,\n      nodeVersion,\n      engines,\n      dependencies,\n    };\n  } else {\n    throw new Error('Не найден файл package.json, build-tools предназначен для npm пакетов, пожалуйста выполните npm init.');\n  }\n}\n"]}