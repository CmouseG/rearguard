{"version":3,"sources":["../../../src/configs/utils/getConfig.js"],"names":["CWD","process","cwd","pkgPath","resolve","propTypes","context","entry","output","modules","socket","browserslist","proxy","isomorphic","css","existsSync","configPath","pkg","require","nodeVersion","parseFloat","engines","node","match","dependencies","__config__","config","propName","hasOwnProperty","Object","keys","length","console","log","bold","red","JSON","stringify","writeFileSync","Error"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;kBAEe,MAAM;AACnB,QAAMA,MAAMC,QAAQC,GAAR,EAAZ;AACA,QAAMC,UAAU,eAAKC,OAAL,CAAaJ,GAAb,EAAkB,cAAlB,CAAhB;;AAEA,QAAMK,YAAY;AAChBC,8BADgB;AAEhBC,0BAFgB;AAGhBC,4BAHgB;AAIhBC,8BAJgB;AAKhBC,4BALgB;AAMhBC,wCANgB;AAOhBC,0BAPgB;AAQhBC,oCARgB;AAShBC;AATgB,GAAlB;;AAYA,MAAI,aAAGC,UAAH,CAAcZ,OAAd,CAAJ,EAA4B;AAC1B,UAAMa,aAAa,eAAKZ,OAAL,CAAaJ,GAAb,EAAkB,yBAAlB,CAAnB;AACA,UAAMiB,MAAMC,QAAQf,OAAR,CAAZ;AACA,UAAMgB,cAAcC,WAAWH,IAAII,OAAJ,CAAYC,IAAZ,CAAiBC,KAAjB,CAAuB,WAAvB,EAAoC,CAApC,CAAX,CAApB;AACA,UAAMF,UAAUJ,IAAII,OAApB;AACA,UAAMG,eAAeP,IAAIO,YAAzB;;AAEA,QAAI,aAAGT,UAAH,CAAcC,UAAd,CAAJ,EAA+B;AAC7B,YAAMS,aAAaP,QAAQF,UAAR,CAAnB;AACA,YAAMU,SAAS;AACbP,mBADa;AAEbE,eAFa;AAGbG;AAHa,OAAf;;AAMA,WAAK,IAAIG,QAAT,IAAqBtB,SAArB,EAAgC;AAC9B,YAAIA,UAAUuB,cAAV,CAAyBD,QAAzB,CAAJ,EAAwC;AACtCD,iBAAOC,QAAP,IAAmBtB,UAAUsB,QAAV,EAAoBF,WAAWE,QAAX,CAApB,CAAnB;AACAF,qBAAWE,QAAX,IAAuB,IAAvB;AACA,iBAAOF,WAAWE,QAAX,CAAP;AACD;AACF;;AAED,UAAIE,OAAOC,IAAP,CAAYL,UAAZ,EAAwBM,MAAxB,GAAiC,CAArC,EAAwC;AACtCC,gBAAQC,GAAR,CAAY,gBAAMC,IAAN,CAAWC,GAAX,CAAgB,kCAAiCC,KAAKC,SAAL,CAAeZ,UAAf,EAA2B,IAA3B,EAAiC,CAAjC,CAAoC,GAArF,CAAZ;AACAO,gBAAQC,GAAR,CAAY,gBAAMC,IAAN,CAAWC,GAAX,CAAgB,kDAAhB,CAAZ;AACD;;AAED,aAAOT,MAAP;AACD,KAtBD,MAsBO;AACL,YAAMA,SAAS,EAAf;;AAEA,WAAK,IAAIC,QAAT,IAAqBtB,SAArB,EAAgC;AAC9B,YAAIA,UAAUuB,cAAV,CAAyBD,QAAzB,CAAJ,EAAwC;AACtCD,iBAAOC,QAAP,IAAmBtB,UAAUsB,QAAV,EAAoB,IAApB,EAA0B,IAA1B,CAAnB;AACD;AACF;;AAED,mBAAGW,aAAH,CAAiBtB,UAAjB,EAA6BoB,KAAKC,SAAL,CAAeX,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAA7B;;AAEA,0BACKA,MADL;AAEEP,mBAFF;AAGEE,eAHF;AAIEG;AAJF;AAMD;AACF,GA/CD,MA+CO;AACL,UAAM,IAAIe,KAAJ,CAAU,uGAAV,CAAN;AACD;AACF,C","file":"getConfig.js","sourcesContent":["import chalk from 'chalk';\nimport fs from 'fs';\nimport path from 'path';\nimport browserslist from '../validate-config/browserslist';\nimport context from '../validate-config/context';\nimport css from '../validate-config/css';\nimport entry from '../validate-config/entry';\nimport isomorphic from '../validate-config/isomorphic';\nimport modules from '../validate-config/modules';\nimport output from '../validate-config/output';\nimport proxy from '../validate-config/proxy';\nimport socket from '../validate-config/socket';\n\nexport default () => {\n  const CWD = process.cwd();\n  const pkgPath = path.resolve(CWD, 'package.json');\n\n  const propTypes = {\n    context,\n    entry,\n    output,\n    modules,\n    socket,\n    browserslist,\n    proxy,\n    isomorphic,\n    css,\n  };\n\n  if (fs.existsSync(pkgPath)) {\n    const configPath = path.resolve(CWD, 'build-tools.config.json');\n    const pkg = require(pkgPath);\n    const nodeVersion = parseFloat(pkg.engines.node.match(/(\\d+\\.?)+/)[0]);\n    const engines = pkg.engines;\n    const dependencies = pkg.dependencies;\n\n    if (fs.existsSync(configPath)) {\n      const __config__ = require(configPath);\n      const config = {\n        nodeVersion,\n        engines,\n        dependencies,\n      };\n\n      for (let propName in propTypes) {\n        if (propTypes.hasOwnProperty(propName)) {\n          config[propName] = propTypes[propName](__config__[propName]);\n          __config__[propName] = null;\n          delete __config__[propName];\n        }\n      }\n\n      if (Object.keys(__config__).length > 0) {\n        console.log(chalk.bold.red(`This is configs not used: \\n\\r\"${JSON.stringify(__config__, null, 2)}\"`));\n        console.log(chalk.bold.red(`Please remove their from build-tools.config.json`));\n      }\n\n      return config;\n    } else {\n      const config = {};\n\n      for (let propName in propTypes) {\n        if (propTypes.hasOwnProperty(propName)) {\n          config[propName] = propTypes[propName](null, true);\n        }\n      }\n\n      fs.writeFileSync(configPath, JSON.stringify(config, null, 2));\n\n      return {\n        ...config,\n        nodeVersion,\n        engines,\n        dependencies,\n      };\n    }\n  } else {\n    throw new Error('Не найден файл package.json, build-tools предназначен для npm пакетов, пожалуйста выполните npm init.');\n  }\n}\n"]}