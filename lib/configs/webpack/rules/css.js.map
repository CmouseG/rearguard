{"version":3,"sources":["../../../../src/configs/webpack/rules/css.js"],"names":["use","isExternal","styleLoader","loader","options","importLoaders","localIdentName","modules","sourceMap","minimize","discardComments","removeAll","plugins","rules","extract","fallback","publicPath","internalCSS","test","include","externalCSS","exclude"],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;AAUA,MAAMA,MAAM,CAACC,aAAa,KAAd,KAAwB;AAClC,MAAIC,cAAc,EAAlB;;AAEA,wCAAmB;AACjB,yCAAkB;AAChB,wCAAe;AACb;;AAEAA,sBAAc,EAAd;AACD,OAJD,MAIO;AACLA,sBAAc,CACZ;AACEC,kBAAQ;AADV,SADY,CAAd;AAKD;AACF,KAZD,MAYO;AACLD,oBAAc,CACZ;AACEC,gBAAQ;AADV,OADY,CAAd;AAKD;AACF,GApBD,MAoBO,qCAAkB;AACvB,sCAAe;AACb;;AAEAD,oBAAc,EAAd;AACD,KAJD,MAIO;AACLA,oBAAc,CACZ;AACEC,gBAAQ;AADV,OADY,CAAd;AAKD;AACF;;AAED,SAAO,CACL,GAAGD,WADE,EAEL;AACEC,YAAQ,YADV;AAEEC,0BACK,CAACH,UAAD,GAAc;AACf;AACAI,qBAAe,CAFA;AAGfC,sBAAgB,mCAAgB,gCAAhB,GAAmD;AAHpD,KAAd,GAIC,EALN;AAME;AACAC,eAAS,CAACN,UAPZ;AAQEO,iDARF;AASE;AACAC,+CAVF;AAWEC,uBAAiB;AACfC,mBAAW;AADI;AAXnB;AAFF,GAFK,EAoBL,IAAG,CAACV,UAAD,GAAc,CACf;AACEE,YAAQ,gBADV;AAEEC,aAAS;AACPQ;AADO;AAFX,GADe,CAAd,GAOC,EAPJ,CApBK,CAAP;AA6BD,CAlED;;AAoEA,MAAMC,QAAQ,CAACZ,aAAa,KAAd,kBACT,sEAAgC;AACjCD,OAAK,mCAAkBc,OAAlB,CAA0B;AAC7BC,cAAU,cADmB;AAE7Bf,SAAKA,IAAIC,UAAJ,CAFwB;AAG7Be,gBAAY,0BAAOA;AAHU,GAA1B;AAD4B,CAAhC,GAMC;AACFhB,OAAKA,IAAIC,UAAJ;AADH,CAPQ,CAAd;;AAYO,MAAMgB,oCAAc,CAACC,OAAO,OAAR;AACzBA,MADyB;AAEzBC;AAFyB,GAGtBN,MAAM,KAAN,CAHsB,CAApB;;AAMA,MAAMO,oCAAc,CAACF,OAAO,OAAR;AACzBA,MADyB;AAEzBG;AAFyB,GAGtBR,MAAM,IAAN,CAHsB,CAApB","file":"css.js","sourcesContent":["import ExtractTextPlugin from 'extract-text-webpack-plugin';\nimport {\n  context,\n  isDevelopment,\n  isInferno,\n  isIsomorphic,\n  isProduction,\n  output,\n  postCssConfig\n} from '../../prepare.build-tools.config';\n\nconst use = (isExternal = false) => {\n  let styleLoader = [];\n\n  if (isDevelopment) {\n    if (isIsomorphic) {\n      if (isInferno) {\n        // TODO isomorphic-style-loader - не подходит так как требует наличие контекста.\n\n        styleLoader = [];\n      } else {\n        styleLoader = [\n          {\n            loader: 'isomorphic-style-loader',\n          },\n        ];\n      }\n    } else {\n      styleLoader = [\n        {\n          loader: 'style-loader',\n        },\n      ];\n    }\n  } else if (isIsomorphic) {\n    if (isInferno) {\n      // TODO isomorphic-style-loader - не подходит так как требует наличие контекста.\n\n      styleLoader = [];\n    } else {\n      styleLoader = [\n        {\n          loader: 'isomorphic-style-loader',\n        },\n      ];\n    }\n  }\n\n  return [\n    ...styleLoader,\n    {\n      loader: 'css-loader',\n      options: {\n        ...!isExternal ? {\n          // CSS Loader https://webpack.js.org/loaders/css-loader/\n          importLoaders: 1,\n          localIdentName: isDevelopment ? '[name]-[local]-[hash:base64:5]' : '[hash:base64:32]',\n        } : {},\n        // CSS Modules https://github.com/css-modules/css-modules\n        modules: !isExternal,\n        sourceMap: isDevelopment,\n        // CSS Nano http://cssnano.co/options/\n        minimize: isProduction,\n        discardComments: {\n          removeAll: true,\n        },\n      },\n    },\n    ...!isExternal ? [\n      {\n        loader: 'postcss-loader',\n        options: {\n          plugins: postCssConfig,\n        },\n      },\n    ] : []\n  ];\n};\n\nconst rules = (isExternal = false) => ({\n  ...!isIsomorphic && isProduction ? {\n    use: ExtractTextPlugin.extract({\n      fallback: 'style-loader',\n      use: use(isExternal),\n      publicPath: output.publicPath,\n    }),\n  } : {\n    use: use(isExternal),\n  },\n});\n\nexport const internalCSS = (test = /\\.css/) => ({\n  test,\n  include: context,\n  ...rules(false)\n});\n\nexport const externalCSS = (test = /\\.css/) => ({\n  test,\n  exclude: context,\n  ...rules(true)\n});\n"]}