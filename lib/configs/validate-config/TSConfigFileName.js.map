{"version":3,"sources":["../../../src/configs/validate-config/TSConfigFileName.js"],"names":["defaultValue","configPath","showConfigForIDE","config","compilerOptions","compileOnSave","propType","typescript","object","keys","string","trim","min","required","boolean","getDefaultValue","validate","error","value","console","message","log","bold","yellow","JSON","stringify","cyan"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,MAAMA,eAAe;AACnBC,cAAY,eADO;AAEnBC,oBAAkB,IAFC;AAGnBC,UAAQ;AACNC,qBAAiB,EADX;AAENC,mBAAe;AAFT;AAHW,CAArB;AAQA,MAAMC,WAAW;AACfC,cAAY,cAAIC,MAAJ,GAAaC,IAAb,CAAkB;AAC5BR,gBAAY,cAAIS,MAAJ,GAAaC,IAAb,GAAoBC,GAApB,CAAwB,CAAxB,EAA2BC,QAA3B,EADgB;AAE5BX,sBAAkB,cAAIY,OAAJ,GAAcD,QAAd,EAFU;AAG5BV,YAAQ,cAAIK,MAAJ,GAAaC,IAAb,CAAkB;AACxBL,uBAAiB,cAAII,MAAJ,EADO;AAExBH,qBAAe,cAAIS,OAAJ;AAFS,KAAlB;AAHoB,GAAlB,EAOXD,QAPW;AADG,CAAjB;;kBAWe,CAACN,UAAD,EAAaQ,kBAAkB,KAA/B,KAAyC;AACtD,MAAIA,eAAJ,EAAqB;AACnB,WAAOf,YAAP;AACD;;AAHqD,sBAI/B,cAAIgB,QAAJ,CAAa,EAACT,UAAD,EAAb,EAA2BD,QAA3B,CAJ+B;;AAAA,QAI/CW,KAJ+C,iBAI/CA,KAJ+C;AAAA,QAIxCC,KAJwC,iBAIxCA,KAJwC;;;AAMtD,MAAID,UAAU,IAAd,EAAoB;AAClBE,YAAQF,KAAR,CAAcA,MAAMG,OAApB;AACAD,YAAQE,GAAR,CAAY,gBAAMC,IAAN,CAAWC,MAAX,CAAmB,mBAAkBC,KAAKC,SAAL,CAAelB,UAAf,EAA2B,IAA3B,EAAiC,CAAjC,CAAoC,GAAzE,CAAZ;AACAY,YAAQE,GAAR,CAAY,gBAAMC,IAAN,CAAWI,IAAX,CAAiB,kBAAiBF,KAAKC,SAAL,CAAezB,YAAf,EAA6B,IAA7B,EAAmC,CAAnC,CAAsC,GAAxE,CAAZ;AACA,WAAOA,YAAP;AACD;AACD,SAAOkB,MAAMX,UAAb;AACD,C","file":"TSConfigFileName.js","sourcesContent":["import chalk from 'chalk';\nimport Joi from 'joi';\n\nconst defaultValue = {\n  configPath: 'tsconfig.json',\n  showConfigForIDE: true,\n  config: {\n    compilerOptions: {},\n    compileOnSave: false,\n  }\n};\nconst propType = {\n  typescript: Joi.object().keys({\n    configPath: Joi.string().trim().min(0).required(),\n    showConfigForIDE: Joi.boolean().required(),\n    config: Joi.object().keys({\n      compilerOptions: Joi.object(),\n      compileOnSave: Joi.boolean()\n    })\n}).required(),\n};\n\nexport default (typescript, getDefaultValue = false) => {\n  if (getDefaultValue) {\n    return defaultValue;\n  }\n  const {error, value} = Joi.validate({typescript}, propType);\n\n  if (error !== null) {\n    console.error(error.message);\n    console.log(chalk.bold.yellow(`Current value: \"${JSON.stringify(typescript, null, 2)}\"`));\n    console.log(chalk.bold.cyan(`We are using: \"${JSON.stringify(defaultValue, null, 2)}\"`));\n    return defaultValue;\n  }\n  return value.typescript;\n}\n"]}