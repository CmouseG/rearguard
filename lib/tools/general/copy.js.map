{"version":3,"sources":["../../../src/tools/general/copy.js"],"names":["resolve","JSON","stringify","private","engines","dependencies","scripts","start","port","host","serverWasRunDetectString","proxy","Object","keys","map","key","route","target","copy"],"mappings":";;;;;;;+BAeA,aAAuB;AACrB,yCAAkB;AAChB,YAAM,iDAAN;AACA,YAAM,mBAAU,eAAKA,OAAL,kCAA2B,cAA3B,CAAV,EAAsDC,KAAKC,SAAL,CAAe;AACzEC,iBAAS,IADgE;AAEzEC,2CAFyE;AAGzEC,qDAHyE;AAIzEC,iBAAS;AACPC,iBAAO;AADA;AAJgE,OAAf,EAOzD,IAPyD,EAOnD,CAPmD,CAAtD,CAAN;AAQA,YAAM,mBAAU,eAAKP,OAAL,kCAA2B,aAA3B,CAAV,EAAqDC,KAAKC,SAAL,CAAe;AACxEM,qCADwE;AAExEC,qCAFwE;AAGxEC,6EAHwE;AAIxEC,eAAOC,OAAOC,IAAP,2BAAmBC,GAAnB,CAAuB,UAACC,GAAD,EAAS;AACrC,iBAAO;AACLC,mBAAOD,GADF;AAELE,oBAAQ,yBAAMF,GAAN;AAFH,WAAP;AAID,SALM;AAJiE,OAAf,EAUxD,IAVwD,EAUlD,CAVkD,CAArD,CAAN;AAWA,YAAM,iBAAQ,eAAKf,OAAL,6BAAuB,MAAD,gCAAoB,EAA1C,CAAR,EAAsD,eAAKA,OAAL,mEAAtD,CAAN;AACD,KAtBD,MAsBO;AACL,YAAM,iBAAQ,eAAKA,OAAL,6BAAuB,MAAD,gCAAoB,EAA1C,CAAR,EAAsD,eAAKA,OAAL,iCAAtD,CAAN;AACD;AACF,G;;kBA1BckB,I;;;;;AAff;;;;AACA;;AAYA;;;;;;kBA8BeA,I","file":"copy.js","sourcesContent":["import path from 'path';\nimport {\n  context,\n  dependencies,\n  engines,\n  host,\n  isIsomorphic,\n  outputServer,\n  port,\n  proxy,\n  publicDirName,\n  serverWasRunDetectString\n} from '../../configs/prepare.build-tools.config';\nimport { copyDir, makeDir, writeFile } from '../lib/fs';\n\nasync function copy () {\n  if (isIsomorphic) {\n    await makeDir(outputServer);\n    await writeFile(path.resolve(outputServer, 'package.json'), JSON.stringify({\n      private: true,\n      engines,\n      dependencies,\n      scripts: {\n        start: 'node server.js',\n      },\n    }, null, 2));\n    await writeFile(path.resolve(outputServer, 'config.json'), JSON.stringify({\n      port,\n      host,\n      serverWasRunDetectString,\n      proxy: Object.keys(proxy).map((key) => {\n        return {\n          route: key,\n          target: proxy[key],\n        };\n      }),\n    }, null, 2));\n    await copyDir(path.resolve(context, `../${publicDirName}`), path.resolve(outputServer, publicDirName));\n  } else {\n    await copyDir(path.resolve(context, `../${publicDirName}`), path.resolve(outputServer));\n  }\n}\n\nexport default copy;\n"]}