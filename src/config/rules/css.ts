import * as ExtractTextPlugin from "extract-text-webpack-plugin";
import * as webpack from "webpack";
import {context, isDebug, isDevelopment, output, postCSS} from "../target.config";

const use = (isExternal = false, isModules = false, isIsomorphic = false) => {
  return [
    ...isDevelopment || isIsomorphic ? [{loader: `${isIsomorphic ? "isomorphic-" : ""}style-loader`}] : [],
    ...!isExternal && isModules
      ? [
        {
          loader: "typings-for-css-modules-loader",
          options: {
            banner: "// This file is automatically generated by typings-for-css-modules.\n// Please do not change this file!",
            camelCase: true,
            discardComments: {
              removeAll: true,
            },
            ident: "typings-for-css-modules",
            importLoaders: 1,
            localIdentName: isDevelopment ? "[path][local][hash:base64:4]" : "[hash:base64:32]",
            // CSS Nano http://cssnano.co/options/
            minimize: !isDevelopment,
            // CSS Modules https://github.com/css-modules/css-modules
            modules: isModules,
            namedExport: isModules,
            sourceMap: isDebug,
          },
        },
      ]
      : [
        {
          loader: "css-loader",
          options: {
            discardComments: {
              removeAll: true,
            },
            ident: "css",
            importLoaders: !isExternal ? 1 : 0,
            localIdentName: isDevelopment ? "[path][local][hash:base64:4]" : "[hash:base64:32]",
            // CSS Nano http://cssnano.co/options/
            minimize: !isDevelopment,
            // CSS Modules https://github.com/css-modules/css-modules
            modules: isModules,
            sourceMap: isDebug,
          },
        },
      ],
    ...!isExternal
      ? [
        {
          loader: "postcss-loader",
          options: {
            ident: "postcss",
            plugins: postCSS.config,
          },
        },
      ]
      : [],
  ];
};

const rules = (isExternal = false, isModules = true, isIsomorphic = false) => {
  if (isDevelopment || isIsomorphic) {
    return {
      use: use(isExternal, isModules, isIsomorphic),
    };
  }

  return {
    use: ExtractTextPlugin.extract(
      {
        fallback: "style-loader",
        publicPath: output.publicPath,
        use: use(isExternal, isModules, isIsomorphic),
      },
    ),
  };
};

export default (): webpack.Rule[] => ([
  // Обыкновенный способ подключения css с генерацией css.d.ts файлов;
  {
    exclude: [/\.global\.css/, /\.isomorphic\.css/, /\.isomorphic\.global\.css/],
    include: context,
    test: /\.css/,
    ...rules(),
  },
  // Изоморфный способ способ подключения css с генерацией css.d.ts файлов;
  {
    exclude: [/\.global\.css/, /\.isomorphic\.global\.css/],
    include: context,
    test: /\.isomorphic\.css/,
    ...rules(false, true, true),
  },
  // Изоморфный способ способ подключения внешних css файлов с генерацией css.d.ts;
  {
    exclude: [],
    include: context,
    test: /\.isomorphic\.global\.css/,
    ...rules(true, false, true),
  },
  // Подключение внешних CSS таких как из node_modules;
  {
    exclude: [context, /\.global\.css/, /\.isomorphic\.css/, /\.isomorphic\.global\.css/],
    test: /\.css/,
    ...rules(true, false, false),
  },
  // Подключение CSS файлов из проекта которые не должны быть модульными.
  {
    exclude: [/\.isomorphic\.css/, /\.isomorphic\.global\.css/],
    include: context,
    test: /\.global\.css/,
    ...rules(true, false, false),
  },
]);
